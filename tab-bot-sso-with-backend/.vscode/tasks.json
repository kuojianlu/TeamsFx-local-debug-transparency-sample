// This file is automatically generated by Teams Toolkit.
// See https://aka.ms/teamsfx-debug-tasks to know the details and how to customize each task.
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Start Teams App Locally",
            "dependsOn": [
                "Validate & Install prerequisites",
                "Install NPM packages",
                "Install Azure Functions binding extensions",
                "Start local tunnel",
                "Register Bot",
                "Register SSO AAD",
                "Build & Upload Teams manifest",
                "Start services"
            ],
            "dependsOrder": "sequence"
        },
        {
            "label": "Validate & Install prerequisites",
            "type": "shell",
            "command": "teamsfx check-prerequisites",
            "args": [
                "--nodejs",
                "--m365Account",
                "--devCert",
                "--func",
                "--ngrok",
                "--dotnet",
                "--ports 53000 7071 9229 3978 9239",
            ]
        },
        {
            "label": "Install NPM packages",
            "dependsOn":[
                "Install NPM packages (tab)",
                "Install NPM packages (bot)",
                "Install NPM packages (api)"
            ],
            "dependsOrder": "sequence"
        },
        {
            "label": "Install NPM packages (tab)",
            "type": "shell",
            "command": "teamsfx npm-install",
            "args": [
                "--project tab",
                "--install-args '--no-audit'"
            ],
            "options": {
                "cwd": "${workspaceFolder}",
            }
        },
        {
            "label": "Install NPM packages (bot)",
            "type": "shell",
            "command": "teamsfx npm-install",
            "args": [
                "--project bot",
                "--install-args '--no-audit'"
            ],
            "options": {
                "cwd": "${workspaceFolder}",
            }
        },
        {
            "label": "Install NPM packages (api)",
            "type": "shell",
            "command": "teamsfx npm-install",
            "args": [
                "--project api",
                "--install-args '--no-audit'"
            ],
            "options": {
                "cwd": "${workspaceFolder}",
            }
        },
        {
            "label": "Install Azure Functions binding extensions",
            "type": "shell",
            "command": "dotnet extensions.csproj -o ./bin --ignore-failed-sources",
            "options": {
                "cwd": "${workspaceFolder}/api",
                "env": {
                    "PATH": "${command:fx-extension.get-dotnet-path}${env:PATH}"
                }
            },
            "presentation": {
                "reveal": "silent"
            }
        },
        {
            "label": "Start local tunnel",
            "type": "shell",
            "command": "teamfx start-local-tunnel ",
            "args": [
                "--configFile .fx/configs/ngrok.yaml",
                // "--binFolder xxx"
            ],
            "isBackground": true,
            "options": {
                "cwd": "${workspaceFolder}",
            },
            "problemMatcher": "$teamsfx-local-tunnel-watch"
        },
        {
            "label": "Register Bot",
            "type": "shell",
            "command": "teamsfx register-bot",
            "args": [
                "--messageEndpoint api/messages",
                // "--botId xxx",
                // "--botPassword xxx",
            ]
            // Output: envOutput: bot/.env.teamsfx.local; stateOutput: .fx/states/state.local.json
        },
        {
            "label": "Register SSO AAD",
            "type": "shell",
            "command": "teamsfx register-sso-aad",
            "args": [
                "--tabBaseUrl https://localhost:53000",
                // "--aadObjectId xxx",
                // "--aadClientId xxx",
                // "--aadClientSecret xxx",
            ]
            // Output: envOutput: bot/.env.teamsfx.local; stateOutput: .fx/states/state.local.json
        },
        {
            "label": "Build & Upload Teams manifest",
            "type": "shell",
            "command": "teamsfx register-teams-app",
            "args": [
                // "--manifestPackagePath xxx"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "Start services",
            "dependsOn": [
                "Start frontend",
                "Start backend",
                "Start bot"
            ]
        },
        {
            "label": "Start frontend",
            "type": "shell",
            "command": "npm run dev:teamsfx",
            "isBackground": true,
            "options": {
                "cwd": "${workspaceFolder}/tabs"
            },
            "problemMatcher": {
                "pattern": {
                    "regexp": "^.*$",
                    "file": 0,
                    "location": 1,
                    "message": 2
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": ".*",
                    "endsPattern": "Compiled|Failed"
                }
            }
        },
        {
            "label": "Start backend",
            "type": "shell",
            "command": "npm run dev:teamsfx",
            "isBackground": true,
            "options": {
                "cwd": "${workspaceFolder}/api",
                "env": {
                    "PATH": "${command:fx-extension.get-func-path}${env:PATH}"
                }
            },
            "problemMatcher": {
                "pattern": {
                    "regexp": "^.*$",
                    "file": 0,
                    "location": 1,
                    "message": 2
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "^.*(Job host stopped|signaling restart).*$",
                    "endsPattern": "^.*(Worker process started and initialized|Host lock lease acquired by instance ID).*$"
                }
            },
            "presentation": {
                "reveal": "silent"
            }
        },
        {
            "label": "Start bot",
            "type": "shell",
            "command": "npm run dev:teamsfx",
            "isBackground": true,
            "options": {
                "cwd": "${workspaceFolder}/bot"
            },
            "problemMatcher": {
                "pattern": {
                    "regexp": "^.*$",
                    "file": 0,
                    "location": 1,
                    "message": 2
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "[nodemon] starting",
                    "endsPattern": "restify listening to|Bot/ME service listening at|[nodemon] app crashed"
                }
            },
            "presentation": {
                "reveal": "silent"
            }
        }
    ]
}